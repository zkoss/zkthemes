@import "~./zul/less/_header.less";

//reset table
.resetTable() {
	table {
		border-spacing: 0;
		th, td {
			background-clip: padding-box;
			padding: 0;
		}
		th {
			text-align: inherit;
		}
	}
}

//tree
.z-tree {
	border: 1px solid @baseBorderColor;
	overflow: hidden;
	zoom: 1;
	//tree header div
	&-header {
		width: 100%;
		.verGradient(@baseGradientStart, @baseGradientEnd);
		position: relative;
		overflow: hidden;
		.resetTable();
	}
	//tree body div
	&-body {
		position: relative;
		overflow: hidden;
		.resetTable();
		//ZK-3263, ZK-4733: scroll issue (chrome scroll anchor bug)
		overflow-anchor: none;
	}
	&-emptybody td {
		.fontStyle(@baseContentFontFamily, @fontSizeMedium, normal, @disabledColor);
		font-style: italic;
		text-align: center;
		height: 1px;
	}
	//tree footer div
	&-footer {
		border-top: 1px solid @baseBorderColor;
		background: @meshFootBackgroundColor;
		overflow: hidden;
		white-space: nowrap;
		.resetTable();

		.z-treefooter {
			overflow: hidden;
			background: @meshFootBackgroundColor;
		}

		.z-treefoot-bar {
			background: @meshFootBackgroundColor;
		}
	}
	// ZK-3138: ROD loading indicator
	&-loading {
		background: transparent no-repeat center;
		.encodeThemeURL(background-image, '~./zul/img/misc/progress.gif');
	}
}
//tree open icon and indent space
.z-tree {
	&-icon,
	&-line {
		.displaySize(inline-block, @baseIconWidth, @baseIconHeight);
		line-height: @baseIconHeight;
		vertical-align: middle;
	}
	&-icon {
		.iconFontStyle(@baseFontSize, @iconColor);
		text-align: center;
		cursor: pointer;
		
		&:hover {
			color: @iconHoverColor;
		}
	}
}
//treecols
.z-treecols {
	th:first-child {
		border-left: none;

		// B50-3306729: the first header should have border-left when the first column is covered with other header
		&.z-treecols-border {
			border-left: 1px solid @meshTitleBorderColor;
		}
	}
	&-bar {
		.verGradient(@baseGradientStart, @baseGradientEnd);
		border-left: 1px solid @meshTitleBorderColor;
		border-bottom: 1px solid @meshTitleBorderColor;
	}
}
.z-treecol {
	border-left: 1px solid @meshTitleBorderColor;
	border-bottom: 1px solid @meshTitleBorderColor;
	padding: 0;
	.verGradient(@baseGradientStart, @baseGradientEnd);
	background-clip: padding-box;
	position: relative;
	overflow: hidden;
	white-space: nowrap;
	
	&-sort {
		cursor: pointer;
		
		&:hover {
			.verGradient(@meshTitleHoverStart, @meshTitleHoverEnd);
		}
		.z-treecol-sorticon {
			color: @iconColor;
			position: absolute;
			top: -7px;
			left: 50%;
		}
	}
	&-sizing,
	&-sizing .z-treecol-content {
		cursor: e-resize;
	}
	&-checkable {
		.displaySize(inline-block, @baseIconWidth, @baseIconHeight);
		border: 1px solid @checkedBorderColor;
		background: @checkedBackgroundColor;
		vertical-align: text-top;
		margin-left: -3px;

		.z-treecol-icon {
			display: none;
			cursor: default;
		}
		&.z-treecol-checked .z-treecol-icon {
			color: @checkedColor;
			display: block;
			padding-left: 1px;
			line-height: @baseLineHeight;
		}
	}
}
// ZK-2151: use strict selector to prevent nest problem
//tree row and cell
.z-treerow {
	//tree cell
	.z-treecell {
		overflow: hidden;
		cursor: pointer;
		background: @meshBackgroundColor;
		position: relative;
		z-index: 0;
	}
	&:hover {
		> .z-treecell {
			.verGradient(@meshContentHoverStart, @meshContentHoverEnd);
			background-clip: padding-box;

			> .z-treecell-content {
				color: @hoverColor;
			}
		}
	}
	//check mark
	&-checkable {
		.displaySize(inline-block, @baseIconWidth, @baseIconHeight);
		border: 1px solid @checkedBorderColor;
		background: @checkedBackgroundColor;
		vertical-align: middle;
		
		&.z-treerow-radio {
			.borderRadius(@baseIconWidth / 2);
		}
		.z-treerow-icon {
			display: none;
			cursor: default;
		}
	}
	//selected tree cell
	&.z-treerow-selected {
		> .z-treecell {
			.verGradient(@selectedGradientStart, @selectedGradientEnd);
			background-clip: padding-box;
			position: relative;

			> .z-treecell-content {
				color: @selectedColor;
			}
		}
		
		&:hover {
			> .z-treecell {
				.verGradient(@selectedHoverGradientStart, @selectedHoverGradientEnd);
				> .z-treecell-content {
					color: @selectedHoverColor;
				}
			}
		}
	}
	&.z-treerow-selected.z-treerow-focus {
		> .z-treecell {
			.verGradient(@selectedFocusGradientStart, @selectedFocusGradientEnd);
			background-clip: padding-box;
			position: relative;

			> .z-treecell-content {
				color: @selectedFocusColor;
			}
		}
		&:hover {
			> .z-treecell {
				.verGradient(@selectedHoverGradientStart, @selectedHoverGradientEnd);
				> .z-treecell-content {
					color: @selectedHoverColor;
				}
			}
		}
	}
	&-focus {
		> .z-treecell {
			.verGradient(@meshContentFocusStart, @meshContentFocusEnd);
			position: relative;
			> .z-treecell-content {
				color: @hoverColor;
			}
		}
	}
	//selected check mark
	&-selected {
		> .z-treecell > .z-treecell-content 
			> .z-treerow-checkable .z-treerow-icon {
			color: @checkedColor;
			display: block;
			padding-left: 1px;
			line-height: @baseLineHeight;
			
			&.z-icon-check {} //for checkbox, use font-awesome
			&.z-icon-radio { //for radio
				.size(@baseIconWidth / 2, @baseIconWidth / 2);
				.borderRadius(@baseIconWidth / 4);
				margin: 3px;
				padding: 0;
				background: @checkedColor;
			}
		}
	}
	//disabled
	&.z-treerow-disabled {
		* {
			color: @disabledColor !important;
			cursor: default !important;
		}
		&:hover > .z-treecell {
			.resetGradient();
			position: relative;
		}
	}
}
// hidden col
.z-treecell-hidden-col {
	white-space: nowrap;
	overflow: hidden;
}

body:not(.gecko) {
	.z-treerow {
		&:hover {
			> .z-treecell {
				position: relative;
			}
		}
	}
}

//content
.z-treecol-content,
.z-treecell-content,
.z-treefooter-content {
	.fontStyle(@baseContentFontFamily, @fontSizeMedium, normal, @textColorGrayLight);
	padding: 4px 5px;
	line-height: @baseButtonHeight;
	overflow: hidden;
}
.z-treecol-content {
	font-weight: bold;
	padding: 4px 5px 3px;
	position: relative;
}
.z-treecell-content {
	padding: 4px 2px;
	line-height: @baseLineHeight;
}
.z-treecell-text {
	vertical-align: middle;
}
//paging
.z-tree-paging {
	&-top {
		border-bottom: 1px solid @pagingBorderColor;
		overflow: hidden;
		width: 100%;
	}
	&-bottom {
		border-top: 1px solid @pagingBorderColor;
		overflow: hidden;
		width: 100%;
	}
}
.z-tree-autopaging .z-treecell-content {
	height: @baseButtonHeight;
	overflow: hidden;
}

.ie9 {
	.z-tree-body {
		margin-top: auto; // ZK-3985: Listbox size change when click the listitem https://stackoverflow.com/a/6425130
	}

	.z-treerow {
		.z-treecell {
			position: static;
			z-index: auto;
		}
	}
}
